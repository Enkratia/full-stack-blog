upstream frontend {
  server frontend_container:3000;
}

upstream backend {
  server backend_container:3001;
}

upstream pgadmin {
  server pgadmin_container:5050;
}

server {
    listen 80;
    server_name finsweet.ru wwww.finsweet.ru;
    server_tokens off;

    client_max_body_size 20M;

    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name finsweet.ru;
    server_tokens off;

    client_max_body_size 20M;

    # certificates === set ssl certificate names (see after bash script execution)
    ssl_certificate /etc/letsencrypt/live/finsweet.ru-0001/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/finsweet.ru-0001/privkey.pem;

    # (default)
    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

  location / {
    proxy_pass http://frontend;

    # for nextjs server actions (or error: url parameter not allowed)
    proxy_http_version 1.1;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Proto $scheme;
  }

  location /backend-api {
    proxy_pass http://backend;
  }

  location /pgadmin {
    proxy_pass http://pgadmin;

    # (default)
    proxy_set_header X-Script-Name /pgadmin;
    proxy_set_header Host $host;
    proxy_redirect off;
  }
}

########################################
## CERTBOT:
## PART1: code for the first certbot certificate request:
# server {
#   listen 80;
#   server_name finsweet.ru www.finsweet.ru;
#   server_tokens off;

#   # authenticate server (default)
#   location /.well-known/acme-challenge/ {
#       root /var/www/certbot;
#   }

#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }

#   location /pgadmin {
#     proxy_pass http://pgadmin;

#     # (default)
#     proxy_set_header X-Script-Name /pgadmin;
#     proxy_set_header Host $host;
#     proxy_redirect off;
#   }
# }

## PART2: 
# pre: if old certificates exists === delete them manually (or cert. names will have postfix: "-0001")
# 1. go to nginx directory
# 2. add permission for all users === chmod +x init-letsencrypt.sh (in nginx directory)
# 3. rerun script === ./init-letsencrypt.sh (in nginx directory)

## PART3: when certificates are present === put full code (code is above)

###########################
# try_files $uri $uri/ =404;

#######################################
# if change manually "init-letsencrypt.sh" === add permission for all users again + rerun script again (or error)
# add permission for all users === chmod +x init-letsencrypt.sh (in nginx directory)
# rerun script === ./init-letsencrypt.sh (in nginx directory)
########################################################################

# error: invalid number of arguments === check ";" in the end os the line;

######
# (OLD1)
# server {
#   listen 80;

#   server_name finsweet.ru www.finsweet.ru;
#   server_tokens off;

#   # authenticate server by certbot
#   location /.well-known/acme-challenge/ {
#       root /var/www/certbot;
#   }

#   location / {
#       return 301 https://$host$request_uri;
#   }
# }

# server {
#   listen 443;

#   server_name finsweet.ru;
#   server_tokens off;

#   # certificates (set hostname)
#   ssl_certificate /etc/letsencrypt/live/finsweet.ru/fullchain.pem;
#   ssl_certificate_key /etc/letsencrypt/live/finsweet.ru/privkey.pem;

#   # default
#   include /etc/letsencrypt/options-ssl-nginx.conf;
#   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }
# }

# (OLD3)
# server {
#   listen 80;
#   # listen 443 ssl;

#   # hostname / with "www"
#   server_name finsweet.ru;
#   server_tokens off;

#   # certificates (change hostname)
#   ssl_certificate /etc/letsencrypt/live/finsweet.ru/fullchain.pem;
#   ssl_certificate_key /etc/letsencrypt/live/finsweet.ru/privkey.pem;

#   # recommended by certbot (use default)
#   include /etc/letsencrypt/options-ssl-nginx.conf;
#   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#   # Определяем, нужен ли редирект с www на без www'шную версию
#   # if ($server_port = 80) { 
#   #   set $https_redirect 1; 
#   # }

#   # if ($host ~ '^www\.') { 
#   #   set $https_redirect 1; 
#   # }

#   # if ($https_redirect = 1) { 
#   #   return 301 https://proj1.com$request_uri; 
#   # }

#   # authenticate server (by certbot)
#   location /.well-known/acme-challenge/ {
#       root /var/www/certbot;
#   }

#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }
# }

# # try_files $uri $uri/ =404;

# (OLD4)
# server {
#   listen 80;
#   # listen [::]:80;

#   server_name finsweet.ru www.finsweet.ru;
#   server_tokens off;

#   # authenticate server by certbot
#   # location /.well-known/acme-challenge/ {
#   #     root /var/www/certbot;
#   # }

#   # location / {
#   #     return 301 https://$host$request_uri;
#   # }


#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }
# }

# server {
#   listen 443;
#   # listen [::]:443 ssl http2;

#   # set hostname
#   server_name finsweet.ru;

#   # security - prevent information disclosure about server version
#   # server_tokens off;

#   # certificates (set hostname)
#   # ssl_certificate /etc/letsencrypt/live/finsweet.ru/fullchain.pem;
#   # ssl_certificate_key /etc/letsencrypt/live/finsweet.ru/privkey.pem;

#   # default options
#   # include /etc/letsencrypt/options-ssl-nginx.conf;
#   # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }
# }

# (OLD6)
# (If's === seems not working)
# server {
#   listen 80;
#   listen 443 ssl;

#   # set hostname / hostname with "www"
#   server_name finsweet.ru wwww.finsweet.ru;
#   server_tokens off;

#   # certificates === set ssl certificate names (see after bash script execution)
#   ssl_certificate /etc/letsencrypt/live/finsweet.ru-0001/fullchain.pem;
#   ssl_certificate_key /etc/letsencrypt/live/finsweet.ru-0001/privkey.pem;

#   # recommended by certbot (default)
#   include /etc/letsencrypt/options-ssl-nginx.conf;
#   ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#   # if (http | wwww) === redirect
#   if ($server_port = 80) { 
#     set $https_redirect 1; 
#   }

#   if ($host ~ '^www\.') { 
#     set $https_redirect 1; 
#   }

#   if ($https_redirect = 1) {
#     # set hostname
#     return 301 https://finsweet.ru$request_uri; 
#   }

#   # authenticate server (default)
#   location /.well-known/acme-challenge/ {
#       root /var/www/certbot;
#   }

#   # toggle http to https when ssl installed
#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }

#   location /pgadmin {
#     proxy_pass http://pgadmin;
#   }
# }

# (OLD === wihout ssl at all)
# server {
#   listen 80;

#   location / {
#     proxy_pass http://frontend;

#     # for nextjs server actions
#     proxy_http_version 1.1;
#     proxy_set_header X-Real-IP $remote_addr;
#     proxy_set_header X-Forwarded-Host $host;
#     proxy_set_header X-Forwarded-Proto $scheme;
#   }

#   location /backend-api {
#     proxy_pass http://backend;
#   }

#   location /pgadmin {
#     proxy_pass http://pgadmin;

#     # (default)
#     proxy_set_header X-Script-Name /pgadmin;
#     proxy_set_header Host $host;
#     proxy_redirect off;
#   }
# }

# confirm bizmail email:
# location /mailru-domainb9kOrE8cII7gTeW7.html {
#   add_header Content-Type text/html;
#   return 200 'mailru-domain: b9kOrE8cII7gTeW7';
# }